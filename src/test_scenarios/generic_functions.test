__CODE__
(struct Person (name age))

(var txt "Hello World!")
(var seq (array 1 3 5 7 9))
(var tab (hashmap (pair "one" 1) (pair "two" 2)))
(var rng (range 0 100 2))
(var obj (makeinstance Person (name "Jon") (age 25)))

(println "== len ==")
(println (len txt))
(println (len seq))
(println (len tab))
(println (len rng))

(println "== empty ==")
(println (empty txt))
(println (empty seq))
(println (empty tab))
(println (empty rng))

(println "== get ==")
(println (get txt 0))
(println (get txt 1))
(println (get txt (- (len txt) 1)))

(println (get seq 0))
(println (get seq 1))
(println (get seq (- (len seq) 1)))

(println (get tab "one"))
(println (get tab "two"))
(println (get tab "three"))
(println (get tab "three" 3))

(println (get obj name))
(println (get obj age))
(println (get obj "name"))
(println (get obj "age"))

(println "== find ==")
(println (find txt 'W'))
(println (find txt 'W' 4))
(println (find seq 7))
(println (find seq 7 2))
(println (find tab 2))

(println "== count ==")
(println (count txt 'l'))
(println (count txt 'o'))
(println (count seq 3))
(println (count tab 2))

(println "== set ==")
(println (set txt 6 'w'))
(println (set seq 2 50))
(println (set tab "two" 20))
(println (set obj "name" "John"))
(println (set obj age 24))

(println (get txt 6))
(println (get seq 2))
(println (get tab "two"))
(println (get obj name))
(println (get obj age))

(println "== clear ==")
(println (clear txt))
(println (clear seq))
(println (clear tab))

(println "== len ==")
(println (len txt))
(println (len seq))
(println (len tab))

(println "== sort ==")
(println (sort (array 2 1 5 4 3)))
(println (sort (array 2 1 5 4 3) false))
(println (sort (array 2 1 5 4 3) true))
(println (sort "21543"))
(println (sort "21543" false))
(println (sort "21543" true))

(println "== reverse ==")
(println (reverse "12345"))
(println (reverse "1"))
(println (reverse (array 1 2 3 4 5)))
(println (reverse (array 1)))

__EXPECT__
== len ==
12
5
2
50
== empty ==
false
false
false
false
== get ==
H
e
!
1
3
9
1
2
null
3
Jon
25
Jon
25
== find ==
6
6
3
3
two
== count ==
3
2
1
1
== set ==
w
50
20
John
24
w
50
20
John
24
== clear ==
12
5
2
== len ==
0
0
0
== sort ==
[1 2 3 4 5]
[1 2 3 4 5]
[5 4 3 2 1]
12345
12345
54321
== reverse ==
54321
1
[5 4 3 2 1]
[1]
