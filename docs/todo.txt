* Add support for file IO
  Add file type
  File functions
  - fopen
  - fclose
  - fflush
  - fread
  - fwrite
  - fget
  - fput
  - fgetline
  - ftell
  - fseek
  File variables
  - stdin
  - stdout
  - stderr

* Implement built-in data structures:
  List:
  - list
  - lislen
  - lisfront
  - lisback
  - lispushf
  - lispopf
  - lispushb
  - lispopb
  - lisget
  - lisset
  - lisadd
  - lisinsert
  - lisfind
  - liscount
  - lissort
  - lisrev
  Hash table
  - hashtable
  - hashlen
  - hashexists
  - hashget
  - hashset
  - hashrem
  - hashclr
  - hashfind
  - hashcount
  Ordered table
  - orderedtable
  - ordlen
  - ordget
  - ordset
  - ordfind
  - ordcount

* Add string functions
  - strsort
  - strrev
  - strcmp

* Add array functions
  - arrsort
  - arrrev

* Add generic functions
  - Add generic get function with support for instances, strings and arrays
  - Add generic set function with support for instances, strings and arrays
  - Add generic len function with support for strings and arrays
  - Add generic find function with support for strings and arrays
  - Add generic count function with support for strings and arrays
  - Note: Should work with future types; list, hashtable and ordered table

* Add generic sort and reverse functions for string, array and list (future) types:
  - sort(sequence, key=null, asc=true)
  - reverse(sequence)

* Add support for command line arguments
  Idea:
    Command:
      ishlang -f calc_sum.ish --args -v -n 10
    In Code:
      (progarg "-v" verbose bool)
      (progarg "-n" num int)
      (proginit)
      (println (pargval verbose))
      (println (pargval num))
    Functions:
      (progarg <option_name> <variable_name> <option_type>)
      (pargval <variable_name>
      (proginit)

* Rework 'break' implementation to avoid using Break::Except
