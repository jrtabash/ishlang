Language Summary
----------------
Ishlang is a fully parenthesized prefix notation programming language inspired by Lisp. Though
it is influnced by Lisp, the language diverts considerably from Lisp.

The name Ishlang (ish-lang) is shorthand for "Lisp'ish programming language", and
was chosen to pay homage to the Lisp programming language. It was a conscious decision to not
name the language lispish (even though that was a first choice) as the language is not a lisp
implementation, and does not try to be a lisp'ish implementation. Though many decisions
and language features might look like lisp, there is no "lisp metric" that is being
used in the development of Ishlang.

Example: Hello world Program
  (println "Hello World")

Values
------
Every expression in ishlang evaluates to a value. A value can hold any of the following types:
  none, int, real, char, string, bool, closure, usertype, userobject

Literals
--------
Can be none, char, int, real, string, and bool. Examples:
- none:   null
- char:   'a'
- string: "hello"
- int:    30
- real:   25.25
- bool:   true

Reserved literal keywords: null, true, false

Variables
---------
Defining: (var <name> <expression>)
- Example: (var number 5)

Assignment: (= <name> <expression>)
- Example: (= number 10)

Exists check: (? <name>)
- Example: (? number)

Input / Output
--------------
- Printing: (print <expression>) or (println <expression>)
  Examples:
    (print "Hello ")
    (println "World")

  The functions print and println evaluate to null value

- Reading: (read)
  Example:
    (var something (read))

Arithmetic
----------
Supported operations: + - * / %
  (<op> <expression> <expression>)

Examples:
  (+ 10 12)
  (* 2 5)

Logical
-------
Supported operations: == != < > <= >= and or
  (op <expression> <expression>)

Examples:
  (== x y)
  (or (== x y) (> y 10))

If Statement
------------
(if <condition_expression> <true_expression> <false_expression>)

Example:
  (if (> x 0) 1 0)

Cond Statement
--------------
(cond
  (<condition> <expression>)
  ...
  (true <expression>))

The (true <expression>) case acts as a default catch all case, and is optional

Example:
  (var check1 false)
  (var check2 false)
  ...
  (cond
   (check1 (println "Check1"))
   (check2 (println "Check2"))
   (true   (println "Neither Check")))

Progn and Block
---------------
Progn and block define a sequence of expression, and groups them into one expression.

(progn
  <expression>
  ...)

(block
  <expression>
  ...)

Difference between progn and block is that block defines an new environment and progn does not.

The value of executing a sequence is the result of evaluating the last expression.

Example:
  (progn
    (var x 10)
    (= x (+ x 5))
    (println x))

  (block
    (var x 10)
    (= x (+ x 5))
    (pringln x))

  In the progn case the variable x is defined in the enclosing environment, and as such
  exists outside the boundary of progn. In the block case, the variable x is defined in
  the block environment, and is not available outside the scope of block.

Looping
-------
General form:
  (loop <decl_expression> <cond_expression> <next_expression>
    <body_expression>)

Conditional only form:
  (loop <cond_expression>
    <body_expression>)

Example - general form:

  (var count 0)
  (loop (var i 1) (<= i 10) (= i (+ i 1))
    (= count (+ count i)))

Example - conditional form:

  (var count 0)
  (var tem 0)
  (loop (< count 55)
    (= term (+ term 1))
    (= count (+ count term)))

Functions
---------
User defined functions:
  (def <name> <param_list>
    <body>)

Functions can be nested, i.e defined inside other functions.

Language supports recursion.

Example:
  (def hello ()
    (println "Hello world"))

  (def add (x y)
    (+ x y))

  (def foobar (x y)
    (var z (+ x y))
    (if (> z 10)
        (/ z 2)
      z)))

Lambda
------
The lambda expression defines a closure.
  (lambda <param_list>
    <body>)

  The closure environment is the enclosing environment where the lambda is defined.

  When a lambda function is executed, the lambda execution environment will inherit the closure environment.

Examples:
  (lambda (x y)
    (+ x y))

  (var myAdd (lambda (x y) (+ x y)))
  (println (myAdd 2 3))

  (var x 0)
  (var addOne (lambda () (= x (+ x 1))))
  (addOne)
  (println x)

Structs
-------
Define a user type:
  (struct <name>
    <member_list>)

Creating an instance:
  (makeinstance <name>)

Setting / Getting member fields:
  (get <instance_expression> <member_name>)
  (set <instance_expression> <member_name> <expression>)

Example:
  (struct Person
    (name
     age))

  (var p (makeinstance Person))
  (set p name "John")
  (set p age 25)
  (println (get p name))
  (println (get p age))

Type Checking
-------------
Is type of?
  (istypeof <expression> <type>

<type> is one of: none, int, real, char, bool, string, closure, usertype, userobject

Example:
  (istypeof 10 int)
  (istypeof Person usertype)

Is struct name?
  (isstructname <expression> <struct>)

Example:
  (var s Person)
  (isstructname s Person)

Is instance of?
  (isinstanceof <expression> <struct>)

Example:
  (var p (makeinstance Person))
  (isinstanceof p Person)

Cloning
-------
Clone a value:
  (clone <expression>)

  will clone the value resulting from executing expression

Example:
  (var p (makeinstance Person))
  (set p (name "John"))
  (set p (age 25))
  (var q (clone p))

String Operations
-----------------
strlen: compute string length
        (strlen <string>)

getchar: return character at position
        (getchar <string> <position>)

setchar: set character at position
        (setchar <string> <position> <character>)

strcat: Concatenate string or character to string
        (strcat <string> <other>)

Examples:
  (var str "Hello!")
  (println (strlen str))
  (println (getchar str 3))
  (setchar str 5 ' ')
  (strcat str "World!")
