;; --------------------------------------------------------------------------------
(struct Node (value next))

(defun make_node (value next)
  (makeinstance Node (value value) (next next)))

(defun node_value (node)
  (get node value))

(defun node_next (node)
  (get node next))

(defun node_setValue (node value)
  (set node value value))

(defun node_setNext (node next)
  (set node next next))

;; --------------------------------------------------------------------------------
(struct List (head))

(defun make_list ()
  (makeinstance List (head null)))

(defun list_head (list)
  (get list head))

(defun list_setHead (list node)
  (set list head node))

(defun list_empty (list)
  (istypeof (list_head list) none))

(defun list_foreach (list ftn)
  (unless (list_empty list)
    (loop (var cur (list_head list)) (not (istypeof cur none)) (= cur (node_next cur))
          (ftn cur))))

(defun list_len (list)
  (var len 0)
  (list_foreach list (lambda (node) (= len (+ len 1))))
  len)

(defun list_last (list)
  (var last null)
  (list_foreach
   list
   (lambda (node)
     (when (istypeof (node_next node) none)
       (= last node))))
  last)

(defun list_append (list value)
  (if (list_empty list)
      (list_setHead list (make_node value null))
    (node_setNext (list_last list) (make_node value null))))

(defun list_prepend (list value)
  (list_setHead list (make_node value (list_head list))))

(defun list_remove (list value)
  (var prev null)
  (list_foreach
   list
   (lambda (node)
     (if (== (node_value node) value)
         (if (istypeof prev none)
             (list_setHead list (node_next node))
           (node_setNext prev (node_next node)))
       (= prev node)))))

(defun list_clear (list)
  (list_setHead list null))

(defun list_print (list newline)
  (var first true)
  (print '[')
  (list_foreach
   list
   (lambda (node)
     (if first
         (= first false)
       (print ", "))
     (print (node_value node))))
  (print ']')
  (when newline
    (println "")))
